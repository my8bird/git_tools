#! /bin/sh

# Stores the branch to rebase onto
base_branch="master"
# Grab the branch the user is currently on
work_branch=`git rev-parse --abbrev-ref HEAD`

echo "Rebasing Branch '$work_branch' onto '$base_branch'"

# Sets wiether we do rebases interactivly or not.
# - use "" or "-i" where "-i" enables reviewing the rebase
review_rebase="-i"

# -- Main
# Ensure the rebase branch is up to date
git checkout $base_branch
git pull --rebase

# Get back the work branch to be ready
git checkout $work_branch

# Find the most recent commit shared by both branches.
merge_point=`git merge-base $base_branch $work_branch`

echo "Using merge point $merge_point"

# Update the users branch to sit on top of the base branch
# This command places all commits after merge point onto the HEAD of base
# branch.  The result keeps the name of the current branch.  In this case
# that is the work branch.
git rebase --onto $base_branch $review_rebase $merge_point
